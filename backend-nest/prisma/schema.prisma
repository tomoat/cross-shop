// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// 生成 Prisma 客户端 
// provider使用prisma-client时，需要设置output路径，使用prisma-client-js时，可以不设置output路径，默认输出到node_modules/.prisma/client
generator client {
  provider = "prisma-client"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 跨境商城数据模型

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  profile   Profile?
  orders    Order[]
  Product   Product[]

  Cart Cart[]
}

enum Role {
  USER
  ADMIN
  SELLER
}

model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  phone     String?
  address   String?
  country   String?
  avatar    String?
  user      User     @relation(fields: [userId], references: [id])
  updatedAt DateTime @updatedAt
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  price       Decimal
  currency    Currency    @default(USD)
  stock       Int
  categoryId  String
  sellerId    String
  images      String[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  category    Category    @relation(fields: [categoryId], references: [id])
  seller      User        @relation(fields: [sellerId], references: [id])
  orderItems  OrderItem[]
  CartItem    CartItem[]
}

enum Currency {
  USD
  EUR
  CNY
  GBP
  JPY
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  products    Product[]
}

// 订单模型 
// todo 拆单为多个子订单
model Order {
  id              String        @id @default(cuid())
  userId          String
  totalAmount     Decimal
  status          OrderStatus   @default(PENDING)
  paymentMethod   PaymentMethod
  shippingAddress String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id])
  items           OrderItem[]
  Payment         Payment[]
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
  CRYPTO
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String
  amount        Decimal
  currency      Currency
  refundReason  String?
  status        PaymentStatus
  paymentMethod PaymentMethod
  transactionId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  order         Order         @relation(fields: [orderId], references: [id])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
